#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
    from thrift.protocol import fastbinary
except:
    fastbinary = None



class CmdbIp(object):
    """
    Attributes:
     - id
     - ip
     - ip_type
    """

    thrift_spec = (
        None, # 0
        (1, TType.I32, 'id', None, None, ), # 1
        (2, TType.STRING, 'ip', None, None, ), # 2
        (3, TType.STRING, 'ip_type', None, None, ), # 3
    )

    def __init__(self, id=None, ip=None, ip_type=None,):
        self.id = id
        self.ip = ip
        self.ip_type = ip_type

    def read(self, iprot):
        if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
            fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32();
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ip = iprot.readString();
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.ip_type = iprot.readString();
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
            oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CmdbIp')
        if self.id != None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.ip != None:
            oprot.writeFieldBegin('ip', TType.STRING, 2)
            oprot.writeString(self.ip)
            oprot.writeFieldEnd()
        if self.ip_type != None:
            oprot.writeFieldBegin('ip_type', TType.STRING, 3)
            oprot.writeString(self.ip_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()
        def validate(self):
            return


    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.iteritems()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CmdbAppBiz(object):
    """
    Attributes:
     - id
     - env
     - app
     - app_type
     - app_port
     - app_source
    """

    thrift_spec = (
        None, # 0
        (1, TType.I32, 'id', None, None, ), # 1
        (2, TType.STRING, 'env', None, None, ), # 2
        (3, TType.STRING, 'app', None, None, ), # 3
        (4, TType.STRING, 'app_type', None, None, ), # 4
        (5, TType.BYTE, 'app_port', None, None, ), # 5
        (6, TType.STRING, 'app_source', None, None, ), # 6
    )

    def __init__(self, id=None, env=None, app=None, app_type=None, app_port=None, app_source=None,):
        self.id = id
        self.env = env
        self.app = app
        self.app_type = app_type
        self.app_port = app_port
        self.app_source = app_source

    def read(self, iprot):
        if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
            fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32();
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.env = iprot.readString();
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.app = iprot.readString();
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.app_type = iprot.readString();
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BYTE:
                    self.app_port = iprot.readByte();
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.app_source = iprot.readString();
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
            oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CmdbAppBiz')
        if self.id != None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.env != None:
            oprot.writeFieldBegin('env', TType.STRING, 2)
            oprot.writeString(self.env)
            oprot.writeFieldEnd()
        if self.app != None:
            oprot.writeFieldBegin('app', TType.STRING, 3)
            oprot.writeString(self.app)
            oprot.writeFieldEnd()
        if self.app_type != None:
            oprot.writeFieldBegin('app_type', TType.STRING, 4)
            oprot.writeString(self.app_type)
            oprot.writeFieldEnd()
        if self.app_port != None:
            oprot.writeFieldBegin('app_port', TType.BYTE, 5)
            oprot.writeByte(self.app_port)
            oprot.writeFieldEnd()
        if self.app_source != None:
            oprot.writeFieldBegin('app_source', TType.STRING, 6)
            oprot.writeString(self.app_source)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()
        def validate(self):
            return


    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.iteritems()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CmdbInfoDO(object):
    """
    Attributes:
     - appInstanceId
     - host_name
     - cpu_core
     - memory
     - cmdbIp
     - cmdbAppBizList
    """

    thrift_spec = (
        None, # 0
        (1, TType.I32, 'appInstanceId', None, None, ), # 1
        (2, TType.STRING, 'host_name', None, None, ), # 2
        (3, TType.STRING, 'cpu_core', None, None, ), # 3
        (4, TType.STRING, 'memory', None, None, ), # 4
        (5, TType.STRUCT, 'cmdbIp', (CmdbIp, CmdbIp.thrift_spec), None, ), # 5
        (6, TType.LIST, 'cmdbAppBizList', (TType.STRUCT,(CmdbAppBiz, CmdbAppBiz.thrift_spec)), None, ), # 6
    )

    def __init__(self, appInstanceId=None, host_name=None, cpu_core=None, memory=None, cmdbIp=None, cmdbAppBizList=None,):
        self.appInstanceId = appInstanceId
        self.host_name = host_name
        self.cpu_core = cpu_core
        self.memory = memory
        self.cmdbIp = cmdbIp
        self.cmdbAppBizList = cmdbAppBizList

    def read(self, iprot):
        if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
            fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.appInstanceId = iprot.readI32();
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.host_name = iprot.readString();
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cpu_core = iprot.readString();
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.memory = iprot.readString();
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.cmdbIp = CmdbIp()
                    self.cmdbIp.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.cmdbAppBizList = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in xrange(_size0):
                        _elem5 = CmdbAppBiz()
                        _elem5.read(iprot)
                        self.cmdbAppBizList.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
            oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CmdbInfoDO')
        if self.appInstanceId != None:
            oprot.writeFieldBegin('appInstanceId', TType.I32, 1)
            oprot.writeI32(self.appInstanceId)
            oprot.writeFieldEnd()
        if self.host_name != None:
            oprot.writeFieldBegin('host_name', TType.STRING, 2)
            oprot.writeString(self.host_name)
            oprot.writeFieldEnd()
        if self.cpu_core != None:
            oprot.writeFieldBegin('cpu_core', TType.STRING, 3)
            oprot.writeString(self.cpu_core)
            oprot.writeFieldEnd()
        if self.memory != None:
            oprot.writeFieldBegin('memory', TType.STRING, 4)
            oprot.writeString(self.memory)
            oprot.writeFieldEnd()
        if self.cmdbIp != None:
            oprot.writeFieldBegin('cmdbIp', TType.STRUCT, 5)
            self.cmdbIp.write(oprot)
            oprot.writeFieldEnd()
        if self.cmdbAppBizList != None:
            oprot.writeFieldBegin('cmdbAppBizList', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.cmdbAppBizList))
            for iter6 in self.cmdbAppBizList:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()
        def validate(self):
            return


    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.iteritems()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class CmdbQueryBO(object):
    """
    Attributes:
     - ip
     - env
     - app
     - app_type
    """

    thrift_spec = (
        None, # 0
        (1, TType.STRING, 'ip', None, None, ), # 1
        (2, TType.STRING, 'env', None, None, ), # 2
        (3, TType.STRING, 'app', None, None, ), # 3
        (4, TType.STRING, 'app_type', None, None, ), # 4
    )

    def __init__(self, ip=None, env=None, app=None, app_type=None,):
        self.ip = ip
        self.env = env
        self.app = app
        self.app_type = app_type

    def read(self, iprot):
        if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
            fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ip = iprot.readString();
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.env = iprot.readString();
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.app = iprot.readString();
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.app_type = iprot.readString();
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
            oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CmdbQueryBO')
        if self.ip != None:
            oprot.writeFieldBegin('ip', TType.STRING, 1)
            oprot.writeString(self.ip)
            oprot.writeFieldEnd()
        if self.env != None:
            oprot.writeFieldBegin('env', TType.STRING, 2)
            oprot.writeString(self.env)
            oprot.writeFieldEnd()
        if self.app != None:
            oprot.writeFieldBegin('app', TType.STRING, 3)
            oprot.writeString(self.app)
            oprot.writeFieldEnd()
        if self.app_type != None:
            oprot.writeFieldBegin('app_type', TType.STRING, 4)
            oprot.writeString(self.app_type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()
        def validate(self):
            return


    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.iteritems()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
