#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
    from thrift.protocol import fastbinary
except:
    fastbinary = None


class Iface(object):
    def getCmdbAppInfo(self, cmdbQueryBoList):
        """
        Parameters:
         - cmdbQueryBoList
        """
        pass

    def updateCmdbAppInfo(self, CmdbInfoDOList):
        """
        Parameters:
         - CmdbInfoDOList
        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot != None:
            self._oprot = oprot
        self._seqid = 0

    def getCmdbAppInfo(self, cmdbQueryBoList):
        """
        Parameters:
         - cmdbQueryBoList
        """
        self.send_getCmdbAppInfo(cmdbQueryBoList)
        return self.recv_getCmdbAppInfo()

    def send_getCmdbAppInfo(self, cmdbQueryBoList):
        self._oprot.writeMessageBegin('getCmdbAppInfo', TMessageType.CALL, self._seqid)
        args = getCmdbAppInfo_args()
        args.cmdbQueryBoList = cmdbQueryBoList
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getCmdbAppInfo(self, ):
        (fname, mtype, rseqid) = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            raise x
        result = getCmdbAppInfo_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.success != None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getCmdbAppInfo failed: unknown result");

    def updateCmdbAppInfo(self, CmdbInfoDOList):
        """
        Parameters:
         - CmdbInfoDOList
        """
        self.send_updateCmdbAppInfo(CmdbInfoDOList)
        self.recv_updateCmdbAppInfo()

    def send_updateCmdbAppInfo(self, CmdbInfoDOList):
        self._oprot.writeMessageBegin('updateCmdbAppInfo', TMessageType.CALL, self._seqid)
        args = updateCmdbAppInfo_args()
        args.CmdbInfoDOList = CmdbInfoDOList
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateCmdbAppInfo(self, ):
        (fname, mtype, rseqid) = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            raise x
        result = updateCmdbAppInfo_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        return


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["getCmdbAppInfo"] = Processor.process_getCmdbAppInfo
        self._processMap["updateCmdbAppInfo"] = Processor.process_updateCmdbAppInfo

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_getCmdbAppInfo(self, seqid, iprot, oprot):
        args = getCmdbAppInfo_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getCmdbAppInfo_result()
        result.success = self._handler.getCmdbAppInfo(args.cmdbQueryBoList)
        oprot.writeMessageBegin("getCmdbAppInfo", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateCmdbAppInfo(self, seqid, iprot, oprot):
        args = updateCmdbAppInfo_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateCmdbAppInfo_result()
        self._handler.updateCmdbAppInfo(args.CmdbInfoDOList)
        oprot.writeMessageBegin("updateCmdbAppInfo", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class getCmdbAppInfo_args(object):
    """
    Attributes:
     - cmdbQueryBoList
    """

    thrift_spec = (
        None, # 0
        (1, TType.LIST, 'cmdbQueryBoList', (TType.STRUCT,(CmdbQueryBO, CmdbQueryBO.thrift_spec)), None, ), # 1
    )

    def __init__(self, cmdbQueryBoList=None,):
        self.cmdbQueryBoList = cmdbQueryBoList

    def read(self, iprot):
        if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
            fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.cmdbQueryBoList = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in xrange(_size7):
                        _elem12 = CmdbQueryBO()
                        _elem12.read(iprot)
                        self.cmdbQueryBoList.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
            oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getCmdbAppInfo_args')
        if self.cmdbQueryBoList != None:
            oprot.writeFieldBegin('cmdbQueryBoList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.cmdbQueryBoList))
            for iter13 in self.cmdbQueryBoList:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()
        def validate(self):
            return


    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.iteritems()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class getCmdbAppInfo_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT,(CmdbInfoDO, CmdbInfoDO.thrift_spec)), None, ), # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
            fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in xrange(_size14):
                        _elem19 = CmdbInfoDO()
                        _elem19.read(iprot)
                        self.success.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
            oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getCmdbAppInfo_result')
        if self.success != None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter20 in self.success:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()
        def validate(self):
            return


    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.iteritems()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class updateCmdbAppInfo_args(object):
    """
    Attributes:
     - CmdbInfoDOList
    """

    thrift_spec = (
        None, # 0
        (1, TType.LIST, 'CmdbInfoDOList', (TType.STRUCT,(CmdbInfoDO, CmdbInfoDO.thrift_spec)), None, ), # 1
    )

    def __init__(self, CmdbInfoDOList=None,):
        self.CmdbInfoDOList = CmdbInfoDOList

    def read(self, iprot):
        if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
            fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.CmdbInfoDOList = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in xrange(_size21):
                        _elem26 = CmdbInfoDO()
                        _elem26.read(iprot)
                        self.CmdbInfoDOList.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
            oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateCmdbAppInfo_args')
        if self.CmdbInfoDOList != None:
            oprot.writeFieldBegin('CmdbInfoDOList', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.CmdbInfoDOList))
            for iter27 in self.CmdbInfoDOList:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()
        def validate(self):
            return


    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.iteritems()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)

class updateCmdbAppInfo_result(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
            fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
            oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateCmdbAppInfo_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()
        def validate(self):
            return


    def __repr__(self):
        L = ['%s=%r' % (key, value)
            for key, value in self.__dict__.iteritems()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
